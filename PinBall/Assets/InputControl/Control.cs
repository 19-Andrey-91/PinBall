//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputControl/Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Control : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Control()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Control"",
    ""maps"": [
        {
            ""name"": ""LevelsControl"",
            ""id"": ""b1f8af94-d555-4844-910c-bed74ffafa4c"",
            ""actions"": [
                {
                    ""name"": ""LeftLift"",
                    ""type"": ""Button"",
                    ""id"": ""e0a7c95e-99e8-41a2-a368-7f1715cbd7d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightLift"",
                    ""type"": ""Button"",
                    ""id"": ""d34de4ca-b70d-4f3d-84bd-02d0530a2327"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be5cd7f7-1cfa-49f7-b6ff-dddc9baaeafc"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""LeftLift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29ba0a59-47f4-4952-8f32-fb8193c56659"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""RightLift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard"",
            ""bindingGroup"": ""KeyBoard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // LevelsControl
        m_LevelsControl = asset.FindActionMap("LevelsControl", throwIfNotFound: true);
        m_LevelsControl_LeftLift = m_LevelsControl.FindAction("LeftLift", throwIfNotFound: true);
        m_LevelsControl_RightLift = m_LevelsControl.FindAction("RightLift", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LevelsControl
    private readonly InputActionMap m_LevelsControl;
    private ILevelsControlActions m_LevelsControlActionsCallbackInterface;
    private readonly InputAction m_LevelsControl_LeftLift;
    private readonly InputAction m_LevelsControl_RightLift;
    public struct LevelsControlActions
    {
        private @Control m_Wrapper;
        public LevelsControlActions(@Control wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftLift => m_Wrapper.m_LevelsControl_LeftLift;
        public InputAction @RightLift => m_Wrapper.m_LevelsControl_RightLift;
        public InputActionMap Get() { return m_Wrapper.m_LevelsControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelsControlActions set) { return set.Get(); }
        public void SetCallbacks(ILevelsControlActions instance)
        {
            if (m_Wrapper.m_LevelsControlActionsCallbackInterface != null)
            {
                @LeftLift.started -= m_Wrapper.m_LevelsControlActionsCallbackInterface.OnLeftLift;
                @LeftLift.performed -= m_Wrapper.m_LevelsControlActionsCallbackInterface.OnLeftLift;
                @LeftLift.canceled -= m_Wrapper.m_LevelsControlActionsCallbackInterface.OnLeftLift;
                @RightLift.started -= m_Wrapper.m_LevelsControlActionsCallbackInterface.OnRightLift;
                @RightLift.performed -= m_Wrapper.m_LevelsControlActionsCallbackInterface.OnRightLift;
                @RightLift.canceled -= m_Wrapper.m_LevelsControlActionsCallbackInterface.OnRightLift;
            }
            m_Wrapper.m_LevelsControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftLift.started += instance.OnLeftLift;
                @LeftLift.performed += instance.OnLeftLift;
                @LeftLift.canceled += instance.OnLeftLift;
                @RightLift.started += instance.OnRightLift;
                @RightLift.performed += instance.OnRightLift;
                @RightLift.canceled += instance.OnRightLift;
            }
        }
    }
    public LevelsControlActions @LevelsControl => new LevelsControlActions(this);
    private int m_KeyBoardSchemeIndex = -1;
    public InputControlScheme KeyBoardScheme
    {
        get
        {
            if (m_KeyBoardSchemeIndex == -1) m_KeyBoardSchemeIndex = asset.FindControlSchemeIndex("KeyBoard");
            return asset.controlSchemes[m_KeyBoardSchemeIndex];
        }
    }
    public interface ILevelsControlActions
    {
        void OnLeftLift(InputAction.CallbackContext context);
        void OnRightLift(InputAction.CallbackContext context);
    }
}
